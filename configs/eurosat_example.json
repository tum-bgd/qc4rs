{
    "name": {"value": "eurosat_example", "info": "name of the config. should reflect params in some way later"},
    "dataset": {"value": "eurosat", "info": "select dataset. currently available: eurosat, resisc45"},
    "dataset_path": {"value": "../2750", "info": "select dataset path"},
    "image_num": {"value": 3000, "info": "define number of images"},
    "image_size": {"value": [64, 64, 3], "info": "define size of images"},
    "classes": {"value": ["AnnualCrop", "SeaLake"], "info": "select classes for binary classification"},
    "grayscale": {"value": false, "info": "use grayscale images. true or false"},
    "preprocessing": {"value": "dae", "info": "select preprocessing technique. currently available: ds, pca, fa, ae, dae (=convae if vgg16=False), rbmae"},
    "vgg16": {"value": true, "info": "use vgg16 for prior feature extraction true or false"},
    "batchsize_pre": {"value": 32, "info": "batch size for preprocessing"},
    "epochs_pre": {"value": 30, "info": "number of epochs for preprocessing"},
    "train_layer": {"value": "fvqc", "info": "select a training layer. currently available: fvqc, gvqc, svqc, hvqc, mera, mps. classic approach also available: dense"},
    "embedding": {"value": "angle", "info": "select quantum encoding for the classical input data. currently available: basis, angle, and bin for no quantum embedding but binarization"},
    "embedding_param": {"value": "x", "info": "select axis for angle embedding. x, y, z"},
    "observable": {"value": "x", "info": "select pauli measurement/ quantum observable. x, y, z"},
    "batchsize_train": {"value": 32, "info": "batch size for training"},
    "epochs_train": {"value": 30, "info": "number of epochs for training"},
    "loss": {"value": "squarehinge", "info": "select loss function. currently available: hinge, squarehinge, crossentropy"},
    "metrics": {"value": "accuracy", "info": "currently no effect"},
    "optimizer": {"value": "adam", "info": "select optimizer. currently available: adam"},
    "optimizer_lr": {"value": 0, "info": "currently no effect"},
    "device": {"value": "cuda", "info": "torch.Device. either cpu or cuda. default will check by torch.cuda.is_available() "}
}